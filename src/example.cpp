//
//  example
//  
//
//  Created by Zev Kronenberg on 7/29/15.
//  This is prototype code - NO GUARANTEE
//  The code was ported from : https://github.com/broadinstitute/hellbender/tree/179e3f1350befc857041615f1816de48b9445603/src/main/java/org/broadinstitute/hellbender/utils/pairhmm


#include <iostream>
#include <vector>
#include "lib/alignHMM.h"
#include "lib/phredUtils.h"

//#include "phredUtilsTests.h"

int main(int argc, const char * argv[]) {
        
  // reference sequence (no quality assumed)
  std::string haplotype = "TGGGGTTCA";
  // read DNA sequence N okay
  std::string readSeq  =  "ACGTGCT";
  // phred scaled quality string
  std::string readQual =  "=@@:5((";


  std::cerr << "Haplotype: "  << std::endl;
  std::cerr << "           TGGGGTTCA" << std::endl;
  std::cerr <<  "Read     : "  << std::endl;
  std::cerr << "           " << readSeq << std::endl;
  std::cerr << "Read Qual: " << std::endl;
  std::cerr << "           " << readQual << std::endl;
  std::cerr << std::endl;
  

  std::cerr << "Step1. Construct class with readlength +1 and halotype length +1." << std::endl; 
  std::cerr << "Step2. Init priors with haplotype seq, read seq and read quals."   << std::endl; 
  std::cerr << "Step3. Update cells in model."                                     << std::endl;
  std::cerr << "step4. Call finalLikelihoodCalculation()                           " << std::endl;

  // constructing the alignHMM class
  alignHMM mats(int(readSeq.size()) +1,int(haplotype.size()) +1);
    
  //Transition matrix was taken verbatim
  //transitions :
  //            : Match to Insertion: Q45
  //            : Match to Deletion : Q45
  //            : Match To Match    :    

  mats.initPriors(haplotype, readSeq, readQual);
  mats.initTransProbs();
  mats.initializeDelMat();
  mats.updatecells();

  std::cout << "priors    : " << std::endl;
  mats.dumpPrior();
  std::cout << "trans     : " << std::endl;
  mats.dumpTrans();
   
  std::cout << "deletion  : " << std::endl;
  mats.dumpDeletionMatrix() ;

  std::cout << "insertion : " << std::endl;
  mats.dumpInsertionMatrix();
    
  std::cout << "match     : " << std::endl;
  mats.dumpMatchMatrix();

  double pRead = mats.finalLikelihoodCalculation();
  std::cout << "Final log10 read prob given haplotype: "
	    << pRead << std::endl;


  std::vector<std::string> trace;
  std::vector<std::string> quals;

  std::vector<double> answers;

  answers.push_back(-41.9645);
  answers.push_back(-96.9825);
  answers.push_back(-96.8512);
  answers.push_back(-97.0108);
  answers.push_back(-87.1403);
  answers.push_back(-97.2517);
  answers.push_back(-96.7728);
  answers.push_back(-95.0526);
  answers.push_back(-94.413);
  answers.push_back(-91.7163);
  answers.push_back(-88.4356);
  answers.push_back(-93.9125);
  answers.push_back(-96.0665);
  answers.push_back(-93.7828);
  answers.push_back(-97.2485);
  answers.push_back(-96.7068);
  answers.push_back(-95.1905);
  answers.push_back(-91.4672);
  answers.push_back(-97.1698);
  answers.push_back(-97.3133);
  answers.push_back(-96.9826);
  answers.push_back(-96.9822);
  answers.push_back(-96.9873);
  answers.push_back(-97.5939);
  answers.push_back(-96.7546);
  answers.push_back(-97.7232);
  answers.push_back(-97.1089);
  answers.push_back(-63.7799);
  answers.push_back(-87.8053);
  answers.push_back(-92.4632);
  answers.push_back(-96.9285);
  answers.push_back(-95.9438);
  answers.push_back(-97.0299);
  answers.push_back(-97.0723);
  answers.push_back(-97.2316);
  answers.push_back(-98.066);
  answers.push_back(-97.9641);
  answers.push_back(-96.9522);
  answers.push_back(-96.3231);
  answers.push_back(-97.2739);
  answers.push_back(-96.0952);
  answers.push_back(-97.0232);
  answers.push_back(-97.9234);
  answers.push_back(-68.0995);
  answers.push_back(-97.8445);
  answers.push_back(-95.9529);
  answers.push_back(-94.3123);
  answers.push_back(-97.4135);
  answers.push_back(-96.3761);
  answers.push_back(-98.0223);
  answers.push_back(-96.1108);


 
 
  haplotype = "GCTTAAGGGTCCAACTAAACATTGCAGTGGCTCATCACAGAGCTGGAAGGAGCCTATATATAGAACTAGAGGCACAGTGGGTGGCCCTGAATACCTTACAGGAAGCAGACTGATTTTCTCATCCAAAAGGCATGCTACATGATGCAGAACAGTCAGTGGGGCCCCTGCAGTCAGGCCTCTCCCATGGAATCCCTGATCTGCACAATCAGTAAGGAACAGGAAGACTTCTGGGATTCAGATAGTGACCCCATGTTGCCCATTCCCTAGATAATGGGGACTTCAAGACAAAGCTCTAGAAAAATGAAAGGAAAAAGCAAAAAGTATCTAAGTCCTTAGCTGCTCCAAAAAAAAGGCCTGCAGCTGCAGGCTGTTGACCACTAATCCCTGGAAATGCATCAAGTAGACTGAAGCTAGGTCTGAGAAGAAATCAAGGCAGGTGTATACGGCCTACTGCATCTCTTTTCCCAAATTACGTTCAAGAAATACAGAAGTTCTCAGATATTGCTCTTTCCTCATTTTCCTCCTACCTCTTAGCTGTTCTTCCTATGGCCCTTGCACACTGAGTTGCCTGTTGCTCTGTCCAAGTCCTGCTAATTCCATGTTCTTTTTTTTTTTGAGACGGAGTCTCACTTCGTCACCAGGCTGGAGTGCAGTGGCACGATCCTGGCTCACTGCAACCTCTGCCTCCTGGATTCAAGTGATTCTTCTGGCTCAGCCTCCTGAGTAGCTGGGATTACAGGCGTGCGCCAACACGCCCAGCTAATTTTGTATATTTAGTAGAGACGGGGTTTCACCGTGTTAGCCAGGCTGATCTCGAACTCCCAACCTCAGGTGATCTGCCCGCCTCGGTCTCCCAAAGTGCTGGGATTACAGGTATGAGCCACCATGCCCAGCCCTAATTCCACTTTCTATTAATATTTCTGAAGTCTGTGTATTTTCACCTTTACTTAATGCAATGCTTTAAAATGGTCGAGGTATATTCCCTACCTAGAAGAACTCATACTTATACACAGTGGGACACATACACGGACTTACATACCACATAAAATTCATTGACAGAACACAGGAATAAACCAATGGTTGATTTATAAAATGTAATATTTTGTACCAAAGGTTTTCAAACTTCTTGGTCTTGGGATTCCTTTACACGCTTATTATATTGATCTTATCAGAAATTAAAACAATTTTTTTTGGAAAATTTAAGTCATTTAGAAAGGATAAACTTACTACATGTTAACATTTTTATGGAAAATAACTATATTTTCTAAATAAAAAATAATTTAGTGAAAAGAATGGCATTGTTTTACATTTTAAAAATGTCAGATCTACTTTTGCTTATACAGAATCTTTAGTCACAATCAGTCCATTCCACCTTTGAACTGAAAATGGTATTAATAGCGTGCAAAAATGTAAGGGGGCCTCTCCCTCTCCCTCTCCCTCTCCGTCTCCCTCTCCCTCTCCCTCTCCCTCTCCCTCTCACTCTCCCCACGGTCTCCCTCTCATGCGGAGCCGAAGCTGGACTGTACTGCTGCCATCTCGGCTCACTGCAACCTCCCTGCCTGATTCTCCTGCCTCAGCCTGCCGAGTGCCTGCGATTGCAGGCACGCGCCGCCACACCTGACTGGTCTTGGTGGAGACGGGGTTTCGCTGTGTTGGCCGGGCCGGTCTCCAGCCCCTGACCGCGAGTGATCCGCCAGCCTTGGCCTCCCGAGGTGCCAGGATTGCAGACGGAGTCTCGTTCACTCAGTGCTCAATGGTGCCCAGACTGGAGTGCAGTGGCGTGATCTCGGCTCGCTACGGCCTACACCTCCCAGCCGCCTGCCTTGGCCTCCCACGGTGCCGAGATTGCAGCCTCTGCCCGGCCGCCACCCCGTCTGGGAAGTGAGGAGCGTCTCTGCCTGGCTGCCCATCGTCTGGGATGTGAGGAGCCTCTCTGCCTGGCTGCCCAGTCTGGAAAGTGAGGAGCGTCTGCGCCCGGCCGCCATCCCATCTAGGAAGTGAGGAGCGCCTCTTCCCAGCCGCCATCACATCTAGGAAGTGAGGAGCGTCTCTGCCCGGCCGCCCATCGTCTGAGATGTGGGGAGCGCCTCTGCCCCGCCGCCCCATCTGGGATGTGAGGAGTGCCTCTGCCCGGCCGAGACCCCGTCTGGGAGGTGAGGAGCGTCTCTGCCCGGCCGCCCCGTGTGAGAAGTGAGGAGACCCTCTGCCTGGCAACCACCCCGTCTGAGAAGTGAGGAGCCCCTCCGCCCGGCAGCTGCCCCGTCTGAGAAGTGAGGAGCCTCTCCGCCCGGCAGCCACCCCATCTGGGAAGTGAGGAGCGTCTCTGCCCGGCAGCCACCCCGTCCGGGAGGGAGGTGGGGGGGTCAGCCCCTGCCCGGCCAGCCGCCCCATCCGGGAGGGAGGTCGGGGGTCAGCCCCCCGCCCGGCCAGCCGCCCCGTCCGGGAGGTGAGGGGCGCCTCTGCCCGGCCACCCCTACTGGGAAGTGAGGAGCCCCTCAGCCTGGCCAGCTGCCCTGTCCGGGAGGGAGGTGGGGGGGTCAGCCCTCCGCCCGGCCAGCCGCCCCGTCTGGGAGGTGAGGGGCGCCTCTGCCCGGCCGCCCCTACTGGGAAGTGAGGAGCCCCTCTGCCCGGCCAGCCGCCCCGTCCGGGAGGGAGGTGGGGGGGTCAGCCCCCTGCCCAGCCAGCCGCCCTGTCCAGGAGGGAGGTGGGGGGGTCAGCCCTCCGCCCGGCCAGCTGCCCCGTCTGGGAGGTGAGGGGCGCCTCTGCCCGGCCGCCCCTACTGGGAAGTGAGGAGCCCCTTTGCCCGGCCAGCCGCCCAGTCTGGGAGGGAGGTGGGGGGGTCAGCCCCCTGCCCGGCCAGCTGCCCCGTCCGGGAGGTGAGGGGCACCTCTGCCCGGCCGCCCCTACTGGGAAGTGAGGAGCCCCTCTGCCCGGCCAGCTGCCCCGTCTGGGAGGGAGGTGGGGGGGGGTCAGCCCCCCCGCCCGGCCAGCTGCCCCGTCCGGGAGGTGAGGGGCGCCTCTGCCCGGCCGCCCCTACTGGGAAGTGAGGAGCCCCTCTGCCCAGCCACCACCCCGTCTGGGAGGTGTGCCCAACAGCTCATTGAGAACGGGCCATGATGACAATGGCGGTTTTGTGGAATAGAAAAGGGGGAAAGGTGGGGAAAAGATTGAGAAATCGGATGGTTGCTGTGTCTGTGTAGAAAGAAGTAGACATGGGAGACTTTTCATTTTGTTCTGCACTAAGAAAAATTCTTCTGCCTTGGGATCCTGTTGATCTGTGACCTTACCCCCAACCCTGTGCTCTCTGAAACATGTGCTGTGTCCACTCAGGGTTAAATGGATTAAGGGCGGTGCAAGATGTGCTTTGTTAAACAGATGCTTGAAGGCAGCATGCTCGTTAAGAGTCATCACCAATCCCTAATCTCAAGTAATCAGGGACACAAACACTGCGGAAGGCTGCAGGGTCCTCTGCCTAGGAAAACCAGAGACCTTTGTTCACTTGTTTATCTGCTGACCTTCCCTCCACTATTGTCCCATGACCCTGCCAAATCCCCCTCTGTGAGAAACAACCAAGAATTATCAATAAAAAAATAAATTAAAAAAAAAAAAAAAAAAAAAAAAAGAAAATGGTATTAATACCATCAGCTGACATTAATTAAGCACTTAGTTTAGTTTATTTATCTATCTCATTTAATCCTTATAACAGCCCAATAAGCTAGACATCATTATTCCCATTATGAAGATGAGGCAGAAGACCTAAGGAAGGATAAATAATTCGCCAAATGTCACTTAAGCACCTGGTTGGACTGCAATGATTCTAATCTAGATGCTCTTACCCACCATGCTGTTAAACTTGATTGCACTGCATCATACACTTGATAATTCAACAGTTAATGATAATAAAGTCAAATTTACATCTACAAATCATGCAAGCTTAAATTGATACTACAAGTTTATTTCAACTTAATAGCTGGGAAATACTTAGGGGGTGTTATGGGCT";

    trace.push_back("CCATAGAACAAACCAAGCACCTTTACTTGCAGCTCTCTAAGGGCCCAGATTTGAGTTTTGATTCAGAGATGAGATAGCAGAGGTCTCTAGAAATGTCTGT");
    trace.push_back("CAAACCAAGCACCTTTACTTGCAGCTCTCTAAGGGCCCAGATTTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTG");
    trace.push_back("CAAACCAAGCACCTTTACTTGCAGCTCTCTAAGGGCCCAGATTTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTG");
    trace.push_back("CAAACCAAGCACCTTTACTTGCAGCTCTCTAAGGGCCCAGATTTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTG");
    trace.push_back("ACCAAGCACCTTTACTTGCAGCTCTCTAAGGGCCCAGATTTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAG");
    trace.push_back("ACCAAGCACCTTTACTTGCAGCTCTCTAAGGGCCCAGATTTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAG");
    trace.push_back("CCAAGCACCTTTACTTGCAGCTCTCTAAGGGCCCAGATTTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGA");
    trace.push_back("AAGCACCTTTACTTGCAGCTCTCTAAGGGCCCAGATTTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAAT");
    trace.push_back("AGCACCTTTACTTGCAGCTCTCTAAGGGCCCAGATTTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATG");
    trace.push_back("AGCACCTTTACTTGCAGCTCTCTAAGGGCCCAGATTTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATG");
    trace.push_back("CACCTTTACTTGCAGCTCTCTAAGGGCCCAGATTTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCT");
    trace.push_back("CTTTACTTGCAGCTCTCTAAGGGCCCAGATTTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTCGGTTTGAAGAATGCTGAT");
    trace.push_back("TTTACTTGCAGCTCTCTAAGGGCCCAGATTTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATG");
    trace.push_back("ACTTGCAGCTCTCTAAGGGCCCAGATTTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACA");
    trace.push_back("CTTGCAGCTCTCTAAGGGCCCAGATTTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACAT");
    trace.push_back("TGCAGCTCTCTAAGGGCCCAGATTTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTT");
    trace.push_back("CAGCTCTCTAAGGGCCCAGATTTGAGTGTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTT");
    trace.push_back("AGCNNTCTNAGGGCCCAGANTTGAGTTTTGACTCAGAGAAGAGAGAGNAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTG");
    trace.push_back("CTCTCTAAGGGCCCAGATTTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCA");
    trace.push_back("CTCTCTAAGGGCCCAGATTTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCA");
    trace.push_back("TCTCTAAGGGCCCAGATTTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAA");
    trace.push_back("TCTCTAAGGGCCCAGATTTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAA");
    trace.push_back("AGGGCCCAGATTTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCC");
    trace.push_back("GGGCCCAGATTTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCT");
    trace.push_back("CCCAGATTTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTA");
    trace.push_back("CCCAGATTTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTA");
    trace.push_back("CAGATTTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTATC");
    trace.push_back("TTGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTACAACTATCCTTTATCATCTG");
    trace.push_back("TGAGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTATCACCTGT");
    trace.push_back("AGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTATCATCTGTTT");
    trace.push_back("AGTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTATCATCTGTTT");
    trace.push_back("GTTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTATCATCTGTTTT");
    trace.push_back("TTTTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTATCATCTGTTTTC");
    trace.push_back("TTGACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTATCATCTGTTTTCTG");
    trace.push_back("ACTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTATCATCTGTTTTCTGTAC");
    trace.push_back("CTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTATCATCTGTTTTCTGTACT");
    trace.push_back("CTCAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGTAACTATCCTTTATCATCTGTTTTCTGTACT");
    trace.push_back("CAGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTATCATCTGTTTTCTGTACTTC");
    trace.push_back("AGAGAAGAGCGAGCAGAGGTCTCTAGAAATGACTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTATCATCTGTTTTCTGTACTTCC");
    trace.push_back("AGAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTATCATCTGTTTTCTGTACTTCC");
    trace.push_back("GAGAAGAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTATCATCTGTTTTCTGTACTTCCA");
    trace.push_back("GAGAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTATCATCTGTTTTCTGTACTTCCACCACT");
    trace.push_back("GAGAGCAGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTATCATCTGTTTTCTGTACTTCCACCACTGG");
    trace.push_back("GCAGAGGTCTCTAGAAATGCCTGTTGGGTGTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTATCATCTGTTTTCTGTACTTCCACCACTGGCTCC");
    trace.push_back("AGAGGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTATCATCTGTTTTCTGTACTTCCACCACTGGCTCCAC");
    trace.push_back("GGTCTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTATCATCTGTTTTCTGTACTTCCACCACTGGCTCCACCTT");
    trace.push_back("CTCTAGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTATCATCTGTTTTCTGTACTTCCACCACTGGCTCCACCTTTTT");
    trace.push_back("AGAAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTATCATCTGTTTTCTGTACTTCCACCACTGGCTCCACCTTTTTCTTT");
    trace.push_back("AAATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTATCATCTGTTTTCTGTACTTCCACCACTGGCTCCACCTTTTTCTTTCT");
    trace.push_back("AATGCCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTATCATCTGTTTTCTGTACTTCCACCACTGGCTCCACCTTTTTCTTTCTG");
    trace.push_back("CCTGTTGGGTTTGAAGAATGCTGATGACATTTTTGCAACTATCCTTTATCATCTGTTTTCTGTACTTCCACCACTGGCTCCACCTTTTTCTTTCTGCAGT");
    
  quals.push_back("=?1+4=+2+2AA+AB9EDE:3<<A+2?E########################################################################");
  quals.push_back("CCCFFFFFGDFHHJJJJJJJJJIJJJJIIJIJJJJJJJJIIJJJJBHHIIGGHIIIIJJIIIIJJDHHHHFFFFD>@CEECDDDDDDDDDDDDDDB?BDD");
  quals.push_back("CC@DFDFFHHHH@HJIGIJJIIIIGIGBEHIIJIJGJIIHHEHGIGE?FHHHEHIGGHIIIFIIHGHGFGFFFDC;@AAEDCDDDDDCDCDCCAB\?\?@DD");
  quals.push_back("DBDDDCC@A>5DCCECEEEEDCFDBCEFFHJIIGCJHIIIIHIGJIHGIIHFBGBG>GGGIIIHGGHCHCIGIJJIIHGGJIJIG;IGHHHHFFFFF@C@");
  quals.push_back("@@;DDDDDHHHBFHCFHD:C3<+C<<<F<A;?FDDB?)0?B?D;9B?GGFD**).).8=F@@)5-5=E>E=5\?\?)76@6;>CC35(;@CA##########");
  quals.push_back(":DCCC>>5DDDCCCEEEEECFFEFHGHHFHGA>C:JIJJIJIIJIJIHIHEGJJIIIIHF>JIIIJIEIIJJIJIJIJJJJIGGIIJGGHGHEFFFFC@C");
  quals.push_back("BCCFFFFFFHHGHJJJIIJJJHIHJIJHIJGIIJJIDGIJEFGGHGIJIGHJJJJIIJJJJGIEHIHHGHH3;CDFDCEE6>CDDCDACDBD8?@@CCDC");
  quals.push_back("@@@FFFFFHGHHHJJIGIJJJJHIIIIICHIJGIJGIJFGIGGHIBGIJJEHGGFHJJJEGIJJCHGHH\?\?BDFFFFFEECEEEDDDDDD1<@?CCC@CD");
  quals.push_back("@A>:DDCDDCDDDEEEDDFFCBBDHHCHD@EIJIJIJJJJIIIGHHIIIGHEJJJIGIIIJJIGJIJIJJJIIIJJJIJIGIJJJIJHHHHHFFFFFCCC");
  quals.push_back("#@>:@:3A@>@CCC@>?;7;;;;7.AEGEGC4;B..4:EH>GFF99?*94HFB93FBB9?DGBHH:;DF?BE9C@AE>HH9@IHIIHFHHGGFDFDD<B=");
  quals.push_back("C@@FFFFFHHHHHJGIJIIIIIIJJJHHIJIJJIIIIJCFFHIIJEHHIGDCFGIJGGIIIDGHIGECHHEHHDFFFFBEECEECB@\?\?BDCCCDCCCDD");
  quals.push_back("CCCFFFFFHGHHHJJIGFHEHGCGHIIJIJIGGIJHIIIGIIGJJJIJGIHIJACGIIGGIJJCEHHHHHHHHFF?DFFEC(5;;@BDCDDCDDDDDDDD");
  quals.push_back("CCCFFFFFHHHGGIGIHIJJ>BGIJIJIICIJCH<GHHJJJJJGIGIGIGHIJJJJJIIJJJ=CGHEFHHHHGFD@CD;CEDD?@BBCCDDDDDDDCDCD");
  quals.push_back("@?@DD<DDFFH?F>EEE3C@G@=AC<<9:*81:DH>89?BBGHCB>D;BFI1C(8=9;@.7).>AC>A=.7=?C>?B?=/55=;;5;:ACCCC:(:>A##");
  quals.push_back("CCCFFFFFHHHHHJIJJJJJJJJJGJJJIJGIIIIIJIJIJIJGIJGHGHBCHIJIJJBCGGIIIGHFHHHHGDDFFFDBDBBDACDCDCCDDDDDEDCC");
  quals.push_back("@CCFDEFFHFFFHIGIGDFHJJIGIJIBCGFHJ=@DHIBGIGHDEEGGDBGHGIIE@@CHGGGGGGEEEECE=?>B8;=BBCACC3@@CACCDDDDDDC5");
  quals.push_back("CC<<C@CCCC?=.6))7?;?C>ACA;.)):HFC=)CCHFC<B:FB?FD393@?FD?4BB<DCD\?\?1=C)GFACGHHHIDF?HGG>G@FF<DHD>DDD<@<");
  quals.push_back("#########BDDBC?A=5,#FFFEHHHHEJIIHIJJJJJIJJIHF?0#IJIIHEJJJIJJJJIJJJJIHGIIJJIIIIJHIJIJJJJHGHHHFFFFFCCC");
  quals.push_back("7CCCC@=;?DA;<EFFDC>?;?6;>GAA@ECGHF>C=;HIGCJGIGGHGIIHDCFB@GCGFEGHEGIIHDDDGHGHHIGHGGJIGBJHHFHHDFDDF@@@");
  quals.push_back("B@@CCAAB;=9>;>7;;?@DEA?AC;CCC=4EEHCGFFHHCDF<?D?B?BF<IGG>GIHGFB=CECIHGCIHIGGIH@F<H>IHFFADFFHHDDBDDCC@");
  quals.push_back("@B@FDFADHHHHHIIIJJJIJJFGIIGEHEHCGIIGIGIGHHHIICHDGH3BFHIGGIIGEIIIJJHHGGG(;?BCCCEEDDDDDDCDEDDDDEEDDDED");
  quals.push_back(">ADDCCA@DDDEECFFDBFFGHHHA>HDGEIJIGHCCGAFIIIIJHGIHHIGGGGGGEGIGGGIIIIHHGFGIIIIHDJGGIGIIHHGGGHHFFFFFCCC");
  quals.push_back("CCCFFFFFHHHHHJJJEEHIJJJJJJJIJJIIGIGIEIDGHHII9DHIJFIJIGIJJJJJIIJJJCEFHFFFFFBAC@CEDDDCDDCDEDDDCCDDCACD");
  quals.push_back("@?@DFABDDHHGG@DG<<B:;AAFCHFH;ECFECCGGGCHAGA09DBGHE>@@FHCGA@8CHEHDEH7?>7@DFF>ACCCCCCCCCDDC;:5@@ACCC?D");
  quals.push_back("CCCFFFFFHHGHFEHGBGDIGCGGGGGEGH3EFAGGGEII3\?\?FH9DGIIIEGIBFHJEG65;CAEGH33?ADDB@DFF;>@CDEEBCCCA:>ACCACD@");
  quals.push_back("DC@DDCC?EEEEDEFFDCFFGGHHA>IJIIJJJIJIJIIEGJIGJJJIIIJIJJJJJJHHEJJIJJJIJJIJJJJJJIHIJJJIIGJGHFFHFFFFFCCC");
  quals.push_back("ACC@DDDCC>;..(@7C>CCHECEHECE@7=:DGGHCFB=:IIIGEGGFBBF;CFBDDCCEIHF?BCIHCAGGHGF<<IIHFEIHGFDHDHGFFFFF@@@");
  quals.push_back("######################################C@CB00B2D?8)1DDCD?4?1*:1:1*94C2++,+3EC<AC<EC<2+EEDB<DDD8DD\?\?\?\?");
  quals.push_back("###########A;>AA;73A?>DAA>@3>C@88))888=8BBB688B)2;DD<CIFFAFDC@*9<<>FEA<CC++:A+++,F:EE9BDA:?BD==+;=?8");
  quals.push_back("?@@\?\?DB=BBF<\?\?CF@F;:C++<AA?BE@@?9CFFC<@D<**000BFHIG@(71==FFC@;DD@AHE:7?E=?;;';(>;;A>@(;(;AA;@>CA####");
  quals.push_back("DDDDDDCCC@ACEEFFFFFFEHHHHFJJJIIJJJJIJJIJIJJJIGAIHHGHGJJJJJIIJJJJIJIIHCJIJJJJGGIHJJJGIIJHGHHGFFFFFCCC");
  quals.push_back("A>;CCC>A>C@ECEEDFED@FEHCCHJJJIIIJJIHF@3?HF@HIJJJJIIIHDJJIJJIIGBGGGC4GIIJJJJEJJIGJIHEGGHFFFDHDFDFFC@@");
  quals.push_back(":?8BD;4A=3ACDAGH@?AC;;CED+AF*::?FBFGG4*0DGFGFEB8@BBBAB)77=C@=..4.====AE;A>5;);;ACACCDCACCC:;>CC@AC9>");
  quals.push_back("DDCDDDDDDEEDEEDFFFDEFHHHHHJJIIJJJIGGHGFGGIGHGHIIJJJIIGIHGJIIIJIGGGIIIIIJJIIHIJIHIJIGGGEHHDADFFFFFCCC");
  quals.push_back("CCCFFFDFFDHDDFHGHEHHJIIAFHGGHGIIBGGHGDGGIIIIDFHHIJHGHIGGGIJJGIGJIEHIGHHH@EEFFFFEEEDEDEDCCDCCDCCDCAAC");
  quals.push_back("CADDDDDDDECEEEDFFFFFB>EHGHHIJJIIGHEJIIGHGIEIIIHHEHHGGA@GGIJIJJIIIIIHEJIIHHG@HHHEHJBJIGGFHDFFDDFFF@C@");
  quals.push_back("@:DDDDCCCEECCECDDDEEEECCC>EAEIIHGGDGGIJIHJIJJJIIGHAHFFFADIIDDBD=JIIGGHEIGEGHFBHFGGIHGGEGHGGHFFFFD@@B");
  quals.push_back("@CCDDEFF?F?FDHHIJFII3AHHIJIGJJDHIIFGGGIIIDDHGE@DDAAFHHIIIIJJJFDHIJGA?EHHHCFE>BFCECECCCC@CCCAC>>B:@CD");
  quals.push_back("\?\??DDDDDD+0)0C:A+AE2CBEE@B4CCDB*?1:0\?\?@AB\?\?7/BBD3B8A;CE:A=7).=.@CD;A:?;77;@>AAAB;(;5>A>>A?AAADAA>;>A");
  quals.push_back("DDC@DDDDDCEDDEEFFFFHHHGHGGIIIIJJIHCEGIIIJJIIIEIGDCDGCFIEIGGCFEJGIGIGGGH@HHEJGJIHHHGJIIGDGHHHFEDFD@CB");
  quals.push_back("DDDDDDCDCC@CDEEEBFFFFHHHHHHGGHIIIJIJJIIJJGJIIHIIHDIGDGGHGHEDJJJIJIIDJJIIIGIIGGHJJIJIJJIHHFFHDDFFF@C@");
  quals.push_back("CCCFFBDFGHGHHFHIJJJJJJJIJIJJJHIJJJHIIJIIIJJJJJIJIJJJJJJJJJJJJJJJJIJJJJHHHHHFHEFFDFFEEEEEEEEFDDDDDBDD");
  quals.push_back("DDDCDDDDDDEDEEEEEFFFEFHGHHHCGHFFGGIJIJHEHAJJJJJIIIIGGJIJJIJHGGGHFIHIJJJJJJIJIIIGJGJIIHEHFHF?DFFFFCCB");
  quals.push_back("#####################################CC8.==*?/B9()DB?0*B::0*1**9\?\?\?\?9?*:+FA3<A<HF@C<CGBFDDDFDDDDB\?\?@");
  quals.push_back("DDC<DDDDCEEECCC=DDFFFFHHHHIJJJIJJJJIIIIJJGHGJIGJIHABHGDHHGGFJJJJIIJJHGIIIJIGIJHHGJIIHFCFHFGGFFFFFCCC");
  quals.push_back("<?53CCEDDA;>5?=9CA9?FHECCFIIIIIHEGEGIHHCHGHCB?*IHFFDFDB9IIIIIGD>FCHGAFE<EHHC9HGIEHGBIHGHHHHF?ADDDC@@");
  quals.push_back("@@@FFDFFHHGDBGHIIIBFCGGGA<FFCGHGIJJJCACEHGIGGGGBBC?BDEFFHIIEEBB;F@7;FGEHGJGDHHGHHBDDB?7@2;>?@CB;@###");
  quals.push_back("@@@DFDFFHHGHHJIGCEFDHDFEHCA4E4*:<FFFGGIIIHEGGHGGHIHHGHGHFGIIJGHJDGIEIHAEHGC@?AA9C>CDDEC?CCAD:>>>>C@C");
  quals.push_back("@@CFFFF>DDHFBHFFHI@DDCHEHEGCF@GHI@GHI>DFI@HIIIIHICHIGHHIGBFEFEHHIIICEHIIGE>CHEHGDBFDFB:@>?>;@CCCCCCC");
  quals.push_back("DDBDBDDDDDBBEDEDACEFFFFFFHHHHHHEIIGJJJJIGHCEJJJIGJJJIGHGIIGJIGIJIGEEIGHGE9HFHFIJIIIIHAJHFHGHFFFFFCCC");
  quals.push_back("CCCFFFFFHHHHFIJJJHIIIJJJIGIIIIJJIJJJIJJIIGIGGHICGIJJJJJDFCHGIG=FHHIIIGJJIGGHCCEFFFFFEEEEEDCCCDDDDDC@");

    for(uint i = 0; i < trace.size(); i++){
      alignHMM mats(int(trace[i].size()) +1,int(haplotype.size()) +1);
      mats.initPriors(haplotype, trace[i], quals[i]);
      mats.initTransProbs();
      mats.initializeDelMat();
      mats.updatecells();
      
      pRead = mats.finalLikelihoodCalculation();
  
      std::cerr << "running read: " << i << " ll: " << pRead << " expected ll: " << answers[i] << std::endl;


    }
    return 0;
}
